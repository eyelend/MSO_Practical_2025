1.

  classDiagram
    %%region Application
        namespace namespace_Application{
            class Application{
                +void Run()
                #Program AskForProgram()
                #void UseProgram()
            }
            class ProgramFormat
            class ProgramImporter{
                +string path 
                -Program parse(String code)
                +Program importFromtxt(string relativePath)
            }
            class ExamplePrograms{
                +Program basic1
                +Program basic2
                +Program advanced1
                +Program expert1
            }
        }
        <<enumeration>> ProgramFormat
        ProgramFormat <.. ProgramImporter
        Application *-- ProgramImporter
        ProgramImporter ..> Program : creates
        Application *-- ExamplePrograms
        ExamplePrograms --> Program
    %%

    %%region Commands
        namespace namesapce_Commands{
            class ICommand{
                +void ApplyOnWorld(ref World world)
            }
            class Repeat{
                +int count
            }
            class Turn{
                +dir
            }
            class Move{
                +int stepCount
            }
        }
        <<interface>> ICommand
        ICommand <|.. Turn
        ICommand <|.. Move
        ICommand <|.. Repeat
        ICommand <-- Repeat : * body
    %%

    class Program{
        +WorldState execute()
    }
    Program --> ICommand : * commands
    Program --> World : 1 startWorld
    Program ..> WorldState
    Program --> ProgramMetrics : 1 metrics
    class ProgramMetrics{
        +int commandCount
        +int maxNestingLevel
        +int repeatCommandCount
    }

    %%region World
        namespace namespace_World{
            class WorldState{
                %% Data that can be changed by the program
                +void AddToTrace(IEventTrace event)
            }
            class PlayerState{
                int2 pos
                dir
            }
            class World{
                +World Copy()
                +void TurnLeft()
                +void TurnRight()
                +void MoveForward(int dist)
            }
            class WorldSettings
            class IEventTrace{
                +string TextualTrace()
            }
            class TurnTrace{
                +dir
            }
            class MoveTrace{
                +int stepCount
            }
        }
        <<interface>> IEventTrace
        WorldState *-- PlayerState : 1 player
        WorldState --* IEventTrace : * trace
        World --> WorldState : 1 startState
        World ..> IEventTrace : creates
        World *-- WorldSettings
        IEventTrace <|.. TurnTrace
        IEventTrace <|.. MoveTrace
    %%

    ICommand ..> World : affects






2.
  Likely future changes:
    - A new type of command gets added, for example ...
    - 
    - 

  High cohesion:
    ...

  Low coupling:
    ...


4.
  ...





